✅ 실행 흐름 예시 (텍스트 워터마크 기준)
1. 사용자가 질문함
"한국 청소년의 코딩교육에 관한 현황에 대해 작성해줘."



2. GPT가 텍스트를 생성함 (예: OpenAI API, 또는 직접 복사)
" 한국의 청소년 코딩교육은 최근 몇 년 사이에 큰 성장을 보이고 있다..."


3. 생성된 결과를 아래 파이썬 코드에 넣어서 실행함

from datetime import datetime

def generate_text_with_watermark(generated_text: str, watermark: str = None) -> str:
    if not watermark:
        today = datetime.today().strftime('%Y-%m-%d')
        watermark = f"[Generated by GPT | {today}]"
    return generated_text.strip() + "\n\n" + watermark

# GPT가 생성한 콘텐츠를 복사해서 여기에 넣음
gpt_output = """한국의 청소년 코딩교육은 최근 몇 년 사이에 큰 성장을 보이고 있다.
다양한 공교육과 사교육 프로그램이 활성화되고 있으며..."""

result = generate_text_with_watermark(gpt_output)
print(result)


✅ 실행 방법
Visual Studio Code, Colab, 또는 단순한 파이썬 파일로 저장해서 실행하면 됩니다.

실행 결과는 콘솔에 다음처럼 출력됩니다:
한국의 청소년 코딩교육은 최근 몇 년 사이에 큰 성장을 보이고 있다.
...

[Generated by GPT | 2025-07-24]


구분	설명
GPT에게 워터마크를 직접 넣게 하려면?   >>>  	프롬프트에 직접 “마지막에 워터마크를 붙여줘”라고 요청해야 함
강제로 워터마크를 넣으려면? >>> 	GPT 결과를 받아서 Python 코드로 후처리해야 함
사용 도구 예시	VSCode, Google Colab, Anaconda Jupyter, 파이썬 터미널 등



✅  PDF 텍스트를 읽고 워터마크 삽입하는 Python 코드
준비 사항 (한 번만 하면 됨)
 pip install pymupdf


from datetime import datetime
import fitz  # PyMuPDF
from pathlib import Path

def extract_text_from_pdf(pdf_path: str) -> str:
    doc = fitz.open(pdf_path)
    full_text = ""
    for page in doc:
        full_text += page.get_text()
    return full_text

def generate_text_with_watermark(generated_text: str, watermark: str = None) -> str:
    if not watermark:
        today = datetime.today().strftime('%Y-%m-%d')
        watermark = f"[Generated by GPT | {today}]"
    return generated_text.strip() + "\n\n" + watermark

def save_text_to_file(text: str, output_path: str):
    with open(output_path, "w", encoding="utf-8") as f:
        f.write(text)

# ▶ 사용 예시
pdf_input = "gpt_output.pdf"          # GPT 출력이 저장된 PDF 경로
output_text_file = "watermarked.txt"  # 결과 저장 파일

if Path(pdf_input).exists():
    text = extract_text_from_pdf(pdf_input)
    result = generate_text_with_watermark(text)
    save_text_to_file(result, output_text_file)
    print(f"✅ 워터마크가 삽입된 텍스트가 {output_text_file}로 저장되었습니다.")
else:
    print(f"❌ 파일이 존재하지 않습니다: {pdf_input}")



📂 폴더 구성 예시

detectgpt_project/
├── gpt_output.pdf          ← GPT 콘텐츠를 담은 PDF
├── pdf_watermark.py        ← 위 코드 저장한 파일
└── watermarked.txt         ← 결과 출력 텍스트

/////////////////////////////////////////////////////////

✅ AI 생성 이미지 판단 (ResNet 기반 판별기 예시)

이미지를 로드해서 AI 생성 이미지인지 판단
결과가 AI 생성 이미지라면 워터마크 삽입
사람이 만든 이미지일 경우는 워터마크 생략 또는 다르게 처리


from torchvision import models, transforms
from PIL import Image
import torch

def is_ai_generated(image_path: str, threshold: float = 0.5) -> bool:
    """
    AI 생성 이미지 여부를 판별 (예시 모델 사용)
    """
    image = Image.open(image_path).convert("RGB")

    preprocess = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor(),
    ])

    model = models.resnet18(pretrained=True)  # ⚠️ 실제로는 fine-tuning된 모델 필요
    model.eval()

    input_tensor = preprocess(image).unsqueeze(0)
    with torch.no_grad():
        outputs = model(input_tensor)
    
    prob_fake = torch.sigmoid(outputs[0][0]).item()  # 예시. 실제 모델에 따라 다름

    print(f"AI 생성 확률: {prob_fake:.2f}")
    return prob_fake >= threshold

>>>>>>>>>>>>>
이 코드는 판별기 구조의 예시로, 실제로는 AI 생성 이미지용으로 학습된 모델이 필요합니다.
예: HuggingFace – Fake image detection models


✅ 워터마크 삽입 함수

설치해야 하는 패키지
pip install torch torchvision pillow

--------------------------------------
from PIL import ImageDraw, ImageFont

def add_watermark(image_path: str, output_path: str, text: str = "Generated by AI"):
    image = Image.open(image_path).convert("RGBA")
    watermark_layer = Image.new("RGBA", image.size, (0, 0, 0, 0))

    draw = ImageDraw.Draw(watermark_layer)
    font = ImageFont.truetype("arial.ttf", 36)  # NanumGothic-Regular.ttf 도 가능

    text_size = draw.textsize(text, font=font)
    position = (image.width - text_size[0] - 20, image.height - text_size[1] - 20)
    draw.text(position, text, font=font, fill=(255, 0, 0, 128))  # 반투명 빨강

    watermarked = Image.alpha_composite(image, watermark_layer)
    watermarked.convert("RGB").save(output_path)

    print(f"💧 워터마크가 삽입된 이미지 저장됨: {output_path}")
------------------------------------

전체 파이프라인
image_path = "input.jpg"
output_path = "output.jpg"

if is_ai_generated(image_path):
    add_watermark(image_path, output_path)
else:
    print("✔️ 사람 이미지로 판단됨. 워터마크 삽입 생략.")

