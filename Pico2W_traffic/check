1) 시스템 의존성(bluepy 빌드용) 설치
sudo apt-get update
sudo apt-get install -y libglib2.0-dev python3-dev gcc

2) bluepy를 bleenv에 설치
/home/codestudio/bleenv/bin/pip install --upgrade pip setuptools wheel
/home/codestudio/bleenv/bin/pip install bluepy

3) 설치 확인
/home/codestudio/bleenv/bin/python -c "import sys, bluepy; print(sys.executable); print(bluepy.__file__)"


출력 경로가 /home/codestudio/bleenv/... 아래여야 정상.

4) 실행 (중요: 가상환경의 python을 sudo로 직접 지정)
sudo /home/codestudio/bleenv/bin/python /home/codestudio/COS/central_cycle.py
# 또는 인자:
sudo /home/codestudio/bleenv/bin/python /home/codestudio/COS/central_cycle.py 12 B
Bluetooth 초기화(한 번만):

sudo btmgmt -i hci0 power off
sudo btmgmt -i hci0 le on
sudo btmgmt -i hci0 bredr off
sudo btmgmt -i hci0 connectable off
sudo btmgmt -i hci0 power on


2) 중앙 스크립트 (광고↔스캔 교차) — 
0.8초간 광고로 피코에게 “Q:1” 트리거
2초간 스캔으로 피코들의 ACK(Service Data 0xFFFF) 수집
반복 루프

#!/usr/bin/env python3
# central_cycle.py
# - hci0로 Complete Local Name 광고(S:xx|D:yy|Q:1) -> Pico가 ACK광고
# - 즉시 스캔 전환하여 UUID 0xFFFF Service Data 파싱해 차량 ID/방향 표시

---------------------------------------------------------

#!/usr/bin/env python3
# central_dual.py — hci1: continuous trigger advertising (0xFFFE), hci0: scan ACK (0xFFFF)

import subprocess, sys, time, threading
from bluepy.btle import Scanner

HCI_ADV  = "hci1"   # 광고 전용 (외장 동글 권장)
HCI_SCAN = "hci0"   # 스캔 전용 (내장)

S_DEFAULT = 15
D_DEFAULT = "A"

def run(cmd):
    return subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

def bytes_hex_args(b: bytes):
    return [f"{x:02x}" for x in b]

def build_trigger_bytes(s, d, q=1):
    # Flags + Service Data(0x16, UUID=0xFFFE, ascii "S:..|D:..|Q:..")
    flags = bytes.fromhex("02 01 06")
    payload = f"S:{s}|D:{d}|Q:{q}".encode()
    sd = bytes([1 + 2 + len(payload), 0x16]) + b"\xfe\xff" + payload
    return flags + sd

# ---- advertiser thread on HCI_ADV ----
def start_advertising(s, d):
    # bring up + nonconnectable
    run(["sudo", "btmgmt", "-i", HCI_ADV, "power", "on"])
    run(["sudo", "btmgmt", "-i", HCI_ADV, "le", "on"])
    run(["sudo", "btmgmt", "-i", HCI_ADV, "bredr", "off"])
    run(["sudo", "btmgmt", "-i", HCI_ADV, "connectable", "off"])

    adv = build_trigger_bytes(s, d, 1)
    # some BlueZ requires bytes separated by spaces
    args = ["sudo", "btmgmt", "-i", HCI_ADV, "advdata"] + bytes_hex_args(adv)
    out = run(args)
    if out.returncode != 0:
        print("[adv] btmgmt advdata error on", HCI_ADV, ":", out.stderr.strip())
        # fallback to raw HCI
        run(["sudo", "hciconfig", HCI_ADV, "up"])
        # set adv params: 100ms, non-connectable
        run(["sudo", "hcitool", "-i", HCI_ADV, "cmd", "0x08", "0x0006",
             "a0","00","a0","00","03","00","00","00","00","00","00","00","07","00"])
        # set adv data
        if len(adv) > 31:
            print("[adv] payload too long:", len(adv)); return
        pad = bytes([0]*(31-len(adv)))
        run(["sudo", "hcitool", "-i", HCI_ADV, "cmd", "0x08", "0x0008",
             f"{len(adv):02x}", *bytes_hex_args(adv), *bytes_hex_args(pad)])
        # enable adv
        run(["sudo", "hcitool", "-i", HCI_ADV, "cmd", "0x08", "0x000a", "01"])
        print(f"[adv] using hcitool on {HCI_ADV}")
    else:
        run(["sudo", "btmgmt", "-i", HCI_ADV, "advertising", "on"])
        print(f"[adv] using btmgmt on {HCI_ADV}")

def stop_advertising():
    run(["sudo", "btmgmt", "-i", HCI_ADV, "advertising", "off"])
    run(["sudo", "hcitool", "-i", HCI_ADV, "cmd", "0x08", "0x000a", "00"])

# ---- scan & parse ACK on HCI_SCAN ----
def parse_service_data_hex(hexstr):
    try:
        b = bytes.fromhex(hexstr)
        if len(b) < 2 or b[0:2] != b'\xff\xff': return None  # UUID 0xFFFF
        p = b[2:]
        if len(p) < 5 or p[0] != 0x50 or p[4] != 0x7C: return None  # 'P'..'|'
        uid3 = p[1:4].hex().upper()
        direction = chr(p[5]) if len(p) >= 6 else '?'
        return {"uid3": uid3, "direction": direction}
    except:
        return None

def scan_loop():
    scanner = Scanner()  # defaults to hci0; ensure HCI_SCAN == hci0
    while True:
        devs = scanner.scan(3.0)
        hits = []
        for d in devs:
            for (adtype, desc, value) in d.getScanData():
                if adtype == 0x16:
                    p = parse_service_data_hex(value)
                    if p:
                        hits.append({"mac": d.addr, "rssi": d.rssi, **p})
        if hits:
            seen = {}
            for h in hits:
                k = h["uid3"]
                if k not in seen or h["rssi"] > seen[k]["rssi"]:
                    seen[k] = h
            print(f"[scan] ACK 수신 {len(seen)}대:")
            for k, h in seen.items():
                print(f"  - UID3={h['uid3']}  D={h['direction']}  RSSI={h['rssi']}  MAC={h['mac']}")
        else:
            print("[scan] ACK 없음")
        time.sleep(0.5)

def main():
    S = sys.argv[1] if len(sys.argv) >= 2 else str(S_DEFAULT)
    D = (sys.argv[2][:1] if len(sys.argv) >= 3 else D_DEFAULT)

    print(f"[central-dual] adv:{HCI_ADV} scan:{HCI_SCAN}  S:{S} D:{D}  (trigger:0xFFFE, ACK:0xFFFF)")
    start_advertising(S, D)
    try:
        scan_loop()
    finally:
        stop_advertising()

if __name__ == "__main__":
    main()
