1) 시스템 의존성(bluepy 빌드용) 설치
sudo apt-get update
sudo apt-get install -y libglib2.0-dev python3-dev gcc

2) bluepy를 bleenv에 설치
/home/codestudio/bleenv/bin/pip install --upgrade pip setuptools wheel
/home/codestudio/bleenv/bin/pip install bluepy

3) 설치 확인
/home/codestudio/bleenv/bin/python -c "import sys, bluepy; print(sys.executable); print(bluepy.__file__)"


출력 경로가 /home/codestudio/bleenv/... 아래여야 정상.

4) 실행 (중요: 가상환경의 python을 sudo로 직접 지정)
sudo /home/codestudio/bleenv/bin/python /home/codestudio/COS/central_cycle.py
# 또는 인자:
sudo /home/codestudio/bleenv/bin/python /home/codestudio/COS/central_cycle.py 12 B
Bluetooth 초기화(한 번만):

sudo btmgmt -i hci0 power off
sudo btmgmt -i hci0 le on
sudo btmgmt -i hci0 bredr off
sudo btmgmt -i hci0 connectable off
sudo btmgmt -i hci0 power on


2) 중앙 스크립트 (광고↔스캔 교차) — 
0.8초간 광고로 피코에게 “Q:1” 트리거
2초간 스캔으로 피코들의 ACK(Service Data 0xFFFF) 수집
반복 루프

#!/usr/bin/env python3
# central_cycle.py
# - hci0로 Complete Local Name 광고(S:xx|D:yy|Q:1) -> Pico가 ACK광고
# - 즉시 스캔 전환하여 UUID 0xFFFF Service Data 파싱해 차량 ID/방향 표시

---------------------------------------------------------

# central_cycle.py
#!/usr/bin/env python3
# central_cycle.py — trigger via Service Data (UUID 0xFFFE), scan ACK (UUID 0xFFFF)

import subprocess, time, sys, signal
from bluepy.btle import Scanner

HCI = "hci0"

S_DEFAULT = 15      # seconds
D_DEFAULT = "A"     # one char
ADV_ON_MS = 300     # advertise trigger briefly
SCAN_SEC  = 3.0     # scan long enough to catch ACK

def run(cmd):
    return subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

# ---- build raw ADV data: Flags + Service Data(0xFFFE) with ascii "S:..|D:..|Q:1"
def build_advdata_trigger(s, d, q=1):
    # Flags 0x01:0x06 = LE General Disc + BR/EDR not supported
    flags = bytes.fromhex("02 01 06")
    payload = f"S:{s}|D:{d}|Q:{q}".encode()
    # AD: len, type=0x16(Service Data 16-bit), UUID=0xFFFE (little endian), payload
    sd = bytes([1 + 2 + len(payload), 0x16]) + b"\xfe\xff" + payload
    adv = flags + sd
    return adv.hex()

def adv_on_trigger(s, d, q=1):
    # Prepare controller state
    run(["sudo", "btmgmt", "-i", HCI, "power", "on"])
    run(["sudo", "btmgmt", "-i", HCI, "le", "on"])
    run(["sudo", "btmgmt", "-i", HCI, "bredr", "off"])
    run(["sudo", "btmgmt", "-i", HCI, "connectable", "off"])
    # Set raw advertising data
    hexdata = build_advdata_trigger(s, d, q)
    out = run(["sudo", "btmgmt", "-i", HCI, "advdata", hexdata])
    if out.returncode != 0:
        print("[central] btmgmt advdata error:", out.stderr.strip())
    # Start advertising (non-connectable)
    run(["sudo", "btmgmt", "-i", HCI, "advertising", "on"])

def adv_off():
    run(["sudo", "btmgmt", "-i", HCI, "advertising", "off"])

# ---- parse ACK from Pico: Service Data (UUID 0xFFFF) = 'P' + uid3 + '|' + D
def parse_service_data_hex(hexstr):
    try:
        b = bytes.fromhex(hexstr)
        if len(b) < 2: return None
        if b[0:2] != b'\xff\xff':  # UUID 0xFFFF
            return None
        payload = b[2:]
        if len(payload) < 5:  # 'P' + uid3 + '|'
            return None
        if payload[0] != 0x50:  # 'P'
            return None
        uid3 = payload[1:4]
        if payload[4] != 0x7C:  # '|'
            return None
        direction = chr(payload[5]) if len(payload) >= 6 else '?'
        return {"uid3": uid3.hex().upper(), "direction": direction}
    except Exception:
        return None

def scan_once(duration=SCAN_SEC):
    scanner = Scanner()
    devices = scanner.scan(duration)
    hits = []
    for dev in devices:
        for (adtype, desc, value) in dev.getScanData():
            if adtype == 0x16:  # Service Data (16-bit)
                parsed = parse_service_data_hex(value)
                if parsed:
                    hits.append({
                        "mac": dev.addr,
                        "rssi": dev.rssi,
                        "uid3": parsed["uid3"],
                        "direction": parsed["direction"],
                    })
    return hits

def main():
    S = str(S_DEFAULT)
    D = D_DEFAULT
    if len(sys.argv) >= 2: S = sys.argv[1]
    if len(sys.argv) >= 3: D = sys.argv[2][:1]

    print(f"[central] cycle start on {HCI}  S:{S} D:{D} (Q=1, ADV {ADV_ON_MS}ms, SCAN {SCAN_SEC}s)")
    print("  Ctrl+C 로 종료")

    def handle_sigint(sig, frame):
        adv_off()
        print("\n[central] stopped.")
        sys.exit(0)
    signal.signal(signal.SIGINT, handle_sigint)

    while True:
        # 1) trigger (Service Data 0xFFFE: 'S:..|D:..|Q:1')
        adv_on_trigger(S, D, 1)
        time.sleep(ADV_ON_MS/1000.0)
        adv_off()

        # 2) scan ACK (Service Data 0xFFFF: 'P'+uid3+'|'+D)
        hits = scan_once(SCAN_SEC)
        if hits:
            seen = {}
            for h in hits:
                k = h["uid3"]
                if k not in seen or h["rssi"] > seen[k]["rssi"]:
                    seen[k] = h
            print(f"[central] ACK 수신 {len(seen)}대:")
            for k, h in seen.items():
                print(f"  - UID3={h['uid3']}  D={h['direction']}  RSSI={h['rssi']}  MAC={h['mac']}")
        else:
            print("[central] ACK 없음")

        time.sleep(0.5)

if __name__ == "__main__":
    main()

------------------------------------------------

