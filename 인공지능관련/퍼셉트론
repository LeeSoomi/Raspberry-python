# ===============================
# 퍼셉트론: 초등 눈높이 주석 버전
# 작성자: soomi 수업용
# ===============================

# 한 줄 요약:
# "입력(0/1)에 가중치(중요도)를 곱해 모두 더하고,
#  그 값이 0 이상이면 1, 아니면 0을 내보내는 작은 두뇌"

def step(x):
    """활성화 함수(계단 함수)
    - x가 0 이상이면 1(참)
    - x가 0 미만이면 0(거짓)
    """
    return 1 if x >= 0 else 0


# -------------------------------
# [예시문제] AND 게이트 (둘 다 켜져야 1)
# -------------------------------
def AND(x1, x2):
    """AND 게이트를 퍼셉트론으로 흉내내기
    - 규칙: (1,1)일 때만 1, 그 외는 0
    - 가중치 w: 두 입력을 똑같이 중요하게 0.5로 설정
    - 편향 b: 문턱을 조금 높게(-0.7) 잡아 둘 다 1일 때만 넘어가게
      * 가중합 = 0.5*x1 + 0.5*x2 + (-0.7)
        - (1,1)  -> 0.5+0.5-0.7 = 0.3  -> step(0.3)=1
        - (1,0)  -> 0.5+0  -0.7 = -0.2 -> 0
        - (0,1)  -> 0+0.5  -0.7 = -0.2 -> 0
        - (0,0)  -> 0+0    -0.7 = -0.7 -> 0
    """
    w1, w2 = 0.5, 0.5
    b = -0.7
    s = w1*x1 + w2*x2 + b   # 가중합
    return step(s)          # 문턱(0)을 넘었는지 판단


# -------------------------------
# [심화문제 1] NAND 게이트 (AND의 반대)
# -------------------------------
def NAND(x1, x2):
    """NAND 게이트: 둘 다 1이면 0, 나머지는 1
    - AND의 반대이므로 가중치와 편향의 부호를 반대로 두면 됨
      * 가중합 = (-0.5)*x1 + (-0.5)*x2 + (0.7)
        - (1,1) -> -0.5 -0.5 + 0.7 = -0.3 -> 0
        - (1,0) -> -0.5 + 0   + 0.7 = 0.2 -> 1
        - (0,1) -> 0   -0.5  + 0.7 = 0.2 -> 1
        - (0,0) -> 0   + 0   + 0.7 = 0.7 -> 1
    """
    w1, w2 = -0.5, -0.5
    b = 0.7
    s = w1*x1 + w2*x2 + b
    return step(s)


# -------------------------------
# [심화문제 2] OR 게이트 (하나만 켜져도 1)
# -------------------------------
def OR(x1, x2):
    """OR 게이트: 둘 중 하나라도 1이면 1
    - 문턱을 낮춰서 입력 하나만 1이어도 합이 0 이상 되도록
      * 가중합 = 0.5*x1 + 0.5*x2 + (-0.2)
        - (1,0) -> 0.3 -> 1
        - (0,1) -> 0.3 -> 1
        - (0,0) -> -0.2 -> 0
        - (1,1) -> 0.8 -> 1
    """
    w1, w2 = 0.5, 0.5
    b = -0.2
    s = w1*x1 + w2*x2 + b
    return step(s)


# -------------------------------
# [보충문제] XOR 게이트 (서로 다르면 1)
# -------------------------------
# ⚠️ 단일 퍼셉트론(층이 1개)으로는 XOR을 만들 수 없음!
# 이유: 한 개의 직선으로 네 점을 "다름=1"과 "같음=0"으로 나눌 수 없기 때문.
# 해결: 간단한 '두 층' 아이디어로 조합 (논리합성)하기.
# 유명한 식: XOR = (A OR B) AND (A NAND B)

def XOR(x1, x2):
    """XOR 게이트: 서로 다르면 1, 같으면 0
    - (A OR B) AND (A NAND B)로 구현 (두 층 구성과 같은 효과)
    """
    t1 = OR(x1, x2)       # 첫 번째 층(은근히 '은닉층' 느낌)
    t2 = NAND(x1, x2)
    return AND(t1, t2)    # 두 신호를 AND로 합쳐 최종 출력


# -------------------------------
# [도움 함수] 진리표 출력
# -------------------------------
def print_truth_table(name, fn):
    """(0,0), (0,1), (1,0), (1,1) 네 가지 입력에 대한 출력 보여주기"""
    print(f"\n<{name} 게이트 진리표>")
    print("A B | 출력")
    for a in [0, 1]:
        for b in [0, 1]:
            print(a, b, "|", fn(a, b))


# -------------------------------
# 실행 예시 (수업 때 바로 보여주기용)
# -------------------------------
if __name__ == "__main__":
    print_truth_table("AND", AND)
    print_truth_table("NAND", NAND)
    print_truth_table("OR", OR)
    print_truth_table("XOR", XOR)  # 조합으로 만든 결과가 표와 같은지 확인
