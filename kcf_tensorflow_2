# 기본 Python 패키지 설치
sudo apt-get update
sudo apt-get install python3-pip python3-dev libatlas-base-dev libjpeg-dev zlib1g-dev libfreetype6-dev

# 필요 모듈 설치
pip3 install tensorflow numpy opencv-python pillow adafruit-circuitpython-neopixel adafruit-blinka selenium webdriver-manager

라즈베리파이에서 Selenium을 사용하려면 Chromium과 Chromedriver가 설치되어 있어야 합니다. 다음 명령어로 설치합니다:
sudo apt-get install chromium-browser chromium-chromedriver

설치된 Chromedriver의 경로 확인
설치된 Chromedriver의 위치는 일반적으로 /usr/lib/chromium-browser/chromedriver에 위치합니다. 
이 경로를 사용하여 Selenium에서 직접 Chromedriver를 지정할 수 있습니다.


설치 후에는 크롬 옵션을 설정해서 무거운 기능을 비활성화하고, 라즈베리파이에서도 원활히 동작할 수 있도록 합니다.
라즈베리파이의 특성과 성능을 고려하여 몇 가지 부분을 수정하였습니다:

네오픽셀 설정 관련 코드 최적화
Selenium 설정 최적화 및 오류 수정
필요 없는 부분 제거 및 코드 정리

import tensorflow as tf
import time
import numpy as np   
import cv2
from tensorflow.keras.models import load_model
from PIL import Image
import board
import neopixel
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.service import Service 
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriv이
sudo python3 /home/pi/cos/converted_keras/kcf.py


# 네오픽셀 설정
LED_PIN = board.D18  # 사용 중인 핀을 설정합니다.
LED_COUNT = 3  # LED 개수를 설정합니다.
pixels = neopixel.NeoPixel(LED_PIN, LED_COUNT)

# 모델 및 레이블 파일 절대 경로 설정
model_path = '/home/pi/converted_keras/keras_model.h5'  # 라즈베리파이에 맞게 경로 수정
labels_path = '/home/pi/converted_keras/label.txt'

# 모델 로드
model = load_model(model_path)

# 클래스 이름 로드
with open(labels_path, 'r') as f:
    class_names = [line.strip() for line in f.readlines()]

# 이미지 전처리 함수
def preprocess_image(image):
    image = Image.fromarray(image)
    image = image.resize((224, 224))  # 모델에 맞게 이미지 크기 조정
    image = np.array(image) / 255.0  # 스케일링
    image = np.expand_dims(image, axis=0)  # 배치 차원 추가
    return image

# 웹캠 초기화
camera_index = 0
cap = cv2.VideoCapture(camera_index)

if not cap.isOpened():
    print("웹캠을 열 수 없습니다.")
    exit()

while True:
    ret, frame = cap.read()
    if not ret:
        print("프레임을 읽을 수 없습니다.")
        break

    # 이미지 전처리
    image = preprocess_image(frame)

    # 예측 수행
    predictions = model.predict(image)
    predicted_class = class_names[np.argmax(predictions)]

    # 결과 출력
    cv2.putText(frame, f'Predicted: {predicted_class}', (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2, cv2.LINE_AA)
    cv2.imshow('Webcam', frame)

    # 예측된 표정에 따른 동작
    if predicted_class == 'joy':
        pixels.fill((0, 255, 0))  # 초록색
        driver.get("https://www.youtube.com/results?search_query=행복하게+해주는+노래")
    elif predicted_class == 'sad':
        pixels.fill((0, 0, 255))  # 파란색
        driver.get("https://www.youtube.com/results?search_query=위로해주는+노래")
    elif predicted_class == 'angry':
        pixels.fill((255, 0, 0))  # 빨간색
        driver.get("https://www.youtube.com/results?search_query=화났을때+듣는+노래")
    elif predicted_class == 'emotionless':
        pixels.fill((255, 255, 0))  # 노란색
        driver.get("https://www.youtube.com/results?search_query=신나게+해주는+노래")

    pixels.show()
    time.sleep(1)
    pixels.fill((0, 0, 0))  # LED 끄기
    pixels.show()

    # 유튜브 영상 재생 처리
    try:
        video = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, '//*[@id="video-title"]'))
        )
        video.click()

        # 비디오 페이지가 로드될 때까지 대기
        time.sleep(60)  # 페이지가 로드되고 비디오가 재생될 시간을 줌
        driver.quit()
        print("Browser closed.")
    except Exception as e:
        print(f"Error playing video: {e}")

    # 'q' 키를 누르면 종료
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# 웹캠 및 창 닫기
cap.release()
cv2.destroyAllWindows()



수정 사항 요약
라즈베리파이용 경로 설정: 모델과 레이블 파일의 경로를 라즈베리파이에 맞게 수정했습니다.
Selenium 성능 최적화: headless 모드를 추가해 GUI 없이 실행되도록 설정했습니다.
네오픽셀 제어 최적화: 예측에 따라 LED 색상을 빠르게 전환하도록 설정했습니다.
YouTube 영상 검색 및 재생: 검색 후 첫 번째 비디오를 클릭하여 재생하는 부분을 단순화했습니다.
추가 참고 사항
chromedriver: chromedriver가 webdriver-manager로 잘 관리되겠지만, 
라즈베리파이에서 실행 중 문제가 발생할 경우 직접 크롬 드라이버를 다운로드하여 경로를 지정해줄 수 있습니다.
권장 사항: 라즈베리파이에서 성능 문제가 발생할 경우, 
TensorFlow Lite 모델로 변환하여 사용하는 것을 추천합니다.
