import tkinter as tk
from tkinter import messagebox
import random

# 플레이어 및 역할 설정
players = ["수미", "철수", "영희", "민수", "지혜"]
roles = ["마피아", "의사", "경찰"] + ["시민"] * (len(players) - 3)
random.shuffle(roles)
assigned_roles = {players[i]: roles[i] for i in range(len(players))}
alive_players = players[:]
protected_player = None  # 의사가 보호하는 플레이어
police_investigation = None  # 경찰이 조사한 플레이어

# Tkinter 창 설정
root = tk.Tk()
root.title("마피아 게임")
root.geometry("500x600")

# 역할 아이콘 추가 (텍스트 기반)
role_icons = {
    "마피아": "🔪",
    "의사": "🚑",
    "경찰": "👮",
    "시민": "🙂"
}

# 게임 메시지 출력용 라벨
message_label = tk.Label(root, text="게임이 시작되었습니다!", font=("Arial", 14), wraplength=400)
message_label.pack(pady=10)

# 플레이어 역할 확인 버튼
def show_role(player):
    role = assigned_roles[player]
    messagebox.showinfo("역할 확인", f"{player}님의 역할은 {role_icons[role]} {role}입니다!")

for player in players:
    btn = tk.Button(root, text=f"{player} 역할 확인", command=lambda p=player: show_role(p))
    btn.pack(pady=3)

# 마피아 공격 기능
def mafia_turn():
    global protected_player
    if "마피아" in [assigned_roles[p] for p in alive_players]:
        target = random.choice([p for p in alive_players if p not in ["마피아"]])
        if target == protected_player:
            message_label.config(text=f"🚑 {protected_player}가 의사의 보호를 받아 살아남았습니다!")
        else:
            alive_players.remove(target)
            message_label.config(text=f"💀 마피아가 {target}을 제거했습니다!")
    else:
        message_label.config(text="마피아가 제거되어 더 이상 공격할 수 없습니다.")

# 경찰 조사 기능
def police_turn():
    global police_investigation
    if "경찰" in [assigned_roles[p] for p in alive_players]:
        police_investigation = random.choice(alive_players)
        if assigned_roles[police_investigation] == "마피아":
            message_label.config(text=f"👮 경찰 조사 결과: {police_investigation}는 마피아입니다! 🔥")
        else:
            message_label.config(text=f"👮 경찰 조사 결과: {police_investigation}는 마피아가 아닙니다.")

# 의사 보호 기능
def doctor_turn():
    global protected_player
    if "의사" in [assigned_roles[p] for p in alive_players]:
        protected_player = random.choice(alive_players)
        message_label.config(text=f"🚑 의사가 {protected_player}를 보호합니다!")

# 투표 기능 - 플레이어가 직접 투표하여 제거할 사람 선택
def vote_out():
    vote_window = tk.Toplevel(root)
    vote_window.title("투표")
    vote_window.geometry("300x400")

    tk.Label(vote_window, text="🗳 투표할 플레이어를 선택하세요", font=("Arial", 12)).pack(pady=10)

    def select_player(player):
        alive_players.remove(player)
        vote_window.destroy()
        message_label.config(text=f"🗳️ 시민 투표 결과: {player}가 제거되었습니다!")
        check_winner()

    for player in alive_players[:]:
        btn = tk.Button(vote_window, text=player, command=lambda p=player: select_player(p))
        btn.pack(pady=5)

# 게임 종료 체크
def check_winner():
    mafia_count = sum(1 for p in alive_players if assigned_roles[p] == "마피아")
    citizen_count = len(alive_players) - mafia_count
    
    if mafia_count == 0:
        messagebox.showinfo("게임 종료", "🎉 시민 승리!")
        root.quit()
    elif mafia_count >= citizen_count:
        messagebox.showinfo("게임 종료", "💀 마피아 승리!")
        root.quit()
    else:
        message_label.config(text="게임이 계속 진행됩니다.")

# 낮과 밤을 진행하는 버튼 추가
mafia_button = tk.Button(root, text="🌙 마피아 공격", command=mafia_turn)
mafia_button.pack(pady=5)

police_button = tk.Button(root, text="👮 경찰 조사", command=police_turn)
police_button.pack(pady=5)

doctor_button = tk.Button(root, text="🚑 의사 보호", command=doctor_turn)
doctor_button.pack(pady=5)

vote_button = tk.Button(root, text="☀️ 시민 투표", command=vote_out)
vote_button.pack(pady=5)

check_button = tk.Button(root, text="🏆 승리 조건 확인", command=check_winner)
check_button.pack(pady=5)

# GUI 실행
root.mainloop()

----------------------------------------------
  
📌 코드 전체 흐름
플레이어 및 역할 배정
Tkinter 창 생성 (GUI 인터페이스)
플레이어가 역할을 확인하는 기능
밤 (마피아 공격, 경찰 조사, 의사 보호)
낮 (시민들이 투표하여 한 명 제거)
게임 종료 체크 (승리 조건 확인)

 --------------------------------------------------

🛠 코드 상세 분석
1️⃣ 플레이어 및 역할 배정
import tkinter as tk
from tkinter import messagebox
import random
# 플레이어 및 역할 설정
players = ["수미", "철수", "영희", "민수", "지혜"]
roles = ["마피아", "의사", "경찰"] + ["시민"] * (len(players) - 3)
random.shuffle(roles)  # 역할을 무작위로 섞음
assigned_roles = {players[i]: roles[i] for i in range(len(players))}  # 플레이어별 역할 배정
alive_players = players[:]  # 현재 살아있는 플레이어 리스트
protected_player = None  # 의사가 보호한 플레이어
police_investigation = None  # 경찰이 조사한 플레이어

💡 설명:
players 리스트: 게임에 참가할 플레이어 이름을 정의
roles 리스트: 마피아(1명), 의사(1명), 경찰(1명), 시민(나머지)
random.shuffle(roles): 역할을 랜덤하게 섞음
assigned_roles: 딕셔너리를 사용해 플레이어에게 역할을 할당
alive_players: 살아있는 플레이어 목록을 관리

-----------------------------------------------------

2️⃣ Tkinter 창 생성 (GUI 인터페이스)

# Tkinter 창 설정
root = tk.Tk()
root.title("마피아 게임")
root.geometry("500x600")

💡 설명:
tk.Tk() → GUI 창을 생성
.title("마피아 게임") → 창의 제목을 설정
.geometry("500x600") → 창 크기 설정

-------------------------------------  
  
 3️⃣ 플레이어 역할 확인 기능
role_icons = {
    "마피아": "🔪",
    "의사": "🚑",
    "경찰": "👮",
    "시민": "🙂"
}
def show_role(player):
    role = assigned_roles[player]
    messagebox.showinfo("역할 확인", f"{player}님의 역할은 {role_icons[role]} {role}입니다!")

for player in players:
    btn = tk.Button(root, text=f"{player} 역할 확인", command=lambda p=player: show_role(p))
    btn.pack(pady=3)

💡 설명:
역할 아이콘 추가: 마피아, 의사, 경찰, 시민을 시각적으로 구분
역할 확인 버튼 생성: 각 플레이어가 클릭하면 본인의 역할이 팝업으로 나타남

  ----------------------------------------------------

4️⃣ 밤: 마피아 공격 기능
def mafia_turn():
    global protected_player
    if "마피아" in [assigned_roles[p] for p in alive_players]:  # 마피아가 살아있다면
        target = random.choice([p for p in alive_players if assigned_roles[p] != "마피아"])
        if target == protected_player:
            message_label.config(text=f"🚑 {protected_player}가 의사의 보호를 받아 살아남았습니다!")
        else:
            alive_players.remove(target)
            message_label.config(text=f"💀 마피아가 {target}을 제거했습니다!")
    else:
        message_label.config(text="마피아가 제거되어 더 이상 공격할 수 없습니다.")

  
💡 설명:
마피아가 살아 있으면 랜덤으로 한 명을 제거
의사가 보호한 경우 살해 실패
마피아가 전멸하면 공격 불가

----------------------------------------------
  
5️⃣ 밤: 경찰 조사 기능
def police_turn():
    global police_investigation
    if "경찰" in [assigned_roles[p] for p in alive_players]:  # 경찰이 살아 있다면
        police_investigation = random.choice(alive_players)
        if assigned_roles[police_investigation] == "마피아":
            message_label.config(text=f"👮 경찰 조사 결과: {police_investigation}는 마피아입니다! 🔥")
        else:
            message_label.config(text=f"👮 경찰 조사 결과: {police_investigation}는 마피아가 아닙니다.")

  
💡 설명:
경찰이 랜덤한 플레이어를 조사
조사 결과 마피아 여부 출력  

  ----------------------------------
  
6️⃣ 밤: 의사 보호 기능 
 def doctor_turn():
    global protected_player
    if "의사" in [assigned_roles[p] for p in alive_players]:  # 의사가 살아 있다면
        protected_player = random.choice(alive_players)
        message_label.config(text=f"🚑 의사가 {protected_player}를 보호합니다!")

💡 설명:
의사가 밤에 한 명을 무작위로 선택해 보호
보호받은 사람은 마피아 공격을 받아도 생존

-----------------------------------
  
  
7️⃣ 낮: 시민 투표 기능 
def vote_out():
    vote_window = tk.Toplevel(root)
    vote_window.title("투표")
    vote_window.geometry("300x400")

    tk.Label(vote_window, text="🗳 투표할 플레이어를 선택하세요", font=("Arial", 12)).pack(pady=10)

    def select_player(player):
        alive_players.remove(player)
        vote_window.destroy()
        message_label.config(text=f"🗳️ 시민 투표 결과: {player}가 제거되었습니다!")
        check_winner()

    for player in alive_players[:]:
        btn = tk.Button(vote_window, text=player, command=lambda p=player: select_player(p))
        btn.pack(pady=5)


  💡 설명:
낮에 살아남은 플레이어 목록을 팝업 창으로 표시
플레이어가 직접 클릭하여 투표 가능

---------------------------------------
  
  8️⃣ 게임 종료 체크
def check_winner():
    mafia_count = sum(1 for p in alive_players if assigned_roles[p] == "마피아")
    citizen_count = len(alive_players) - mafia_count
    
    if mafia_count == 0:
        messagebox.showinfo("게임 종료", "🎉 시민 승리!")
        root.quit()
    elif mafia_count >= citizen_count:
        messagebox.showinfo("게임 종료", "💀 마피아 승리!")
        root.quit()
    else:
        message_label.config(text="게임이 계속 진행됩니다.")

  
  💡 설명:
마피아가 모두 제거되면 시민 승리
마피아 수가 시민 수 이상이면 마피아 승리
게임 종료 시 messagebox를 사용해 결과 표시 후 root.quit() 실행


