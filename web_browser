import cv2
import numpy as np
import tensorflow as tf
import board
import neopixel
import time
import threading

# 설정 부분
MODEL_PATH = "/home/pi/cos/converted_keras/keras_model.h5"
LABELS_PATH = "/home/pi/cos/converted_keras/labels.txt"
LED_PIN = board.D18          # GPIO 18번 핀에 연결
NUM_PIXELS = 3               # 네오픽셀 개수
ORDER = neopixel.GRB         # 네오픽셀 색상 순서

# 네오픽셀 객체 생성
pixels = neopixel.NeoPixel(LED_PIN, NUM_PIXELS, brightness=0.5, auto_write=False, pixel_order=ORDER)

# Keras 모델과 라벨 불러오기
model = tf.keras.models.load_model(MODEL_PATH)

# 라벨 불러오기
with open(LABELS_PATH, "r") as f:
    labels = [line.strip() for line in f]

# 색상 설정 (표정에 따라 색상 매핑)
colors = {
    "joy": (0, 255, 0),          # 기쁨: 초록색
    "sad": (0, 0, 255),          # 슬픔: 파란색
    "angry": (255, 0, 0),        # 화남: 빨간색
    "Expressionless": (255, 255, 0)  # 무표정: 노란색
}

def set_color(color):
    pixels.fill(color)
    pixels.show()  # LED 색상을 실제로 적용

# 프로그램 종료를 위한 타이머
def stop_program():
    time.sleep(60)  # 1분 동안 대기
    print("프로그램이 종료됩니다.")
    cap.release()
    cv2.destroyAllWindows()
    pixels.fill((0, 0, 0))
    pixels.show()
    exit(0)

# 타이머 스레드 시작
timer_thread = threading.Thread(target=stop_program)
timer_thread.start()

# 웹캠 초기화
cap = cv2.VideoCapture(0)

try:
    while True:
        ret, frame = cap.read()
        if not ret:
            print("카메라에서 영상을 읽을 수 없습니다.")
            break
        
        # 이미지 전처리
        resized_frame = cv2.resize(frame, (224, 224))
        normalized_frame = np.expand_dims(resized_frame / 255.0, axis=0)
        
        # 예측
        predictions = model.predict(normalized_frame)
        label_index = np.argmax(predictions)
        label = labels[label_index]
        
        # 인식된 표정에 따라 LED 색상 변경
        if label in colors:
            set_color(colors[label])
        
        # 현재 인식된 표정 출력
        print(f"Detected expression: {label} (Index: {label_index})")

        # 웹캠 화면에 라벨과 번호 표시
        cv2.putText(frame, f"{label} ({label_index})", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
        cv2.imshow("Webcam Feed", frame)

        # 'q' 키로 즉시 종료
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

except KeyboardInterrupt:
    print("종료합니다.")
finally:
    pixels.fill((0, 0, 0))  # 프로그램 종료 시 모든 LED 끄기
    pixels.show()
    cap.release()
    cv2.destroyAllWindows()


주요 변경 사항:
1분 타이머 추가:

stop_program 함수를 사용해 1분 후 프로그램이 자동으로 종료되도록 설정했습니다. 
타이머는 별도의 스레드로 실행되므로 메인 프로그램의 흐름에 영향을 주지 않습니다.
exit(0)로 프로그램 강제 종료:

타이머가 만료되면 모든 리소스를 해제하고 프로그램을 강제 종료하도록 했습니다.
cv2.waitKey(1)로 즉시 반응:

q 키를 누르면 언제든지 프로그램을 즉시 종료할 수 있습니다.
이제 이 코드를 실행해보세요. 프로그램은 1분 동안 실행되며, 
그동안 표정 인식 결과와 LED 색상이 바뀌는 것을 확인할 수 있을 것입니다. 
추가적으로 수정이 필요하거나 다른 문제가 생기면 말씀해 주세요!
