✅ 목표 개수 충족 전까지 반복해서 데이터 수집
✅ CSV 파일로 데이터 저장 (자동 누적)
✅ 각 동작별 데이터 개수 실시간 표시
✅ 목표 도달 시 데이터 수집 자동 종료

------------------------------------

import serial
import time
import binascii

PORT = "COM9"  # 포트 확인 후 수정
BAUD_RATE = 57600  # 🛠 9600에서 57600으로 변경 (더 빠르고 안정적)

def extract_brainwaves(packet):
    """ThinkGear 패킷에서 베타파와 감마파만 정확히 추출"""
    beta_low, beta_high = None, None
    gamma_low, gamma_high = None, None

    try:
        index = 0
        while index < len(packet):
            code = packet[index:index+2]  # 데이터 유형 코드 (Hex 2자리)
            if code in ["06", "07", "08", "09"]:  # Beta Low, Beta High, Gamma Low, Gamma High
                value_hex = packet[index+2:index+8]  # 3바이트(6자리 16진수)
                
                # 🛠 3바이트 데이터를 10진수로 변환
                try:
                    value = int(value_hex, 16)
                    value = value & 0xFFFFFF  # 24비트 마스킹

                    # 🛠 이상값 필터링 (정상적인 범위: 0~10000)
                    if value > 10000:
                        value = None  # 비정상적인 값 제거
                except ValueError:
                    value = None  # 변환 오류 방지

                if code == "06":
                    beta_low = value
                elif code == "07":
                    beta_high = value
                elif code == "08":
                    gamma_low = value
                elif code == "09":
                    gamma_high = value

                index += 8  # 2(코드) + 6(데이터) 이동
            else:
                index += 2  # 다음 코드로 이동

    except Exception as e:
        print(f"데이터 처리 오류: {e}")

    return beta_low, beta_high, gamma_low, gamma_high

def read_neuro_data():
    try:
        ser = serial.Serial(PORT, BAUD_RATE, timeout=1)
        print(f"✅ 시리얼 포트 {PORT} 연결됨, 데이터 수집 시작...")

        buffer = b""

        # 🛠 데이터가 올 때까지 기다리도록 추가
        while ser.in_waiting == 0:
            print("⏳ 데이터 수신 대기 중...")
            time.sleep(0.5)

        while True:
            if ser.in_waiting > 0:
                raw_data = ser.read(64)  # 64바이트씩 읽기 (패킷 길이 대비 증가)
                buffer += raw_data

                hex_data = binascii.hexlify(buffer).decode('utf-8')

                if "aaaa" in hex_data:
                    start_index = hex_data.index("aaaa")
                    packet_data = hex_data[start_index:]

                    if len(packet_data) > 6:
                        try:
                            length = int(packet_data[4:6], 16)
                        except ValueError:
                            length = 0  # 변환 오류 방지

                        if len(packet_data) >= (6 + length * 2):
                            valid_packet = packet_data[:(6 + length * 2)]

                            beta_low, beta_high, gamma_low, gamma_high = extract_brainwaves(valid_packet)

                            # 📌 값이 정상 범위(0~10000) 내에 있는 경우만 출력
                            if beta_low is not None or beta_high is not None or gamma_low is not None or gamma_high is not None:
                                print(f"🧠 베타파 (Low): {beta_low}, 베타파 (High): {beta_high}")
                                print(f"⚡ 감마파 (Low): {gamma_low}, 감마파 (High): {gamma_high}")

                            buffer = buffer[start_index + 2:]

                else:
                    print("❌ 유효한 데이터 패턴(aaaa) 없음, 다시 수신 중...")
                    time.sleep(0.1)  # 데이터가 없는 경우 다시 시도

            time.sleep(0.05)

    except serial.SerialException:
        print(f"❌ 오류: 포트 '{PORT}'를 찾을 수 없습니다. 포트를 확인하세요!")
    except Exception as e:
        print(f"오류 발생: {e}")
    finally:
        if 'ser' in locals():
            ser.close()
            print("🔌 시리얼 포트 종료됨.")

# 실행
read_neuro_data()


---------------------------------------

📊 실행 예시

🧠 뇌파 데이터 수집 시작! (목표: 각 동작 50개)

[현재 데이터 개수]
✅ 왼쪽: 12/50
✅ 오른쪽: 15/50
✅ 위로: 10/50
✅ 아래로: 18/50
✅ 정지: 20/50

로봇팔 동작 입력 (왼쪽/오른쪽/위로/아래로/정지): 위로
✅ 데이터 저장: 512, 820, 435, 1234 → 위로

[현재 데이터 개수]
✅ 왼쪽: 12/50
✅ 오른쪽: 15/50
✅ 위로: 11/50
✅ 아래로: 18/50
✅ 정지: 20/50

🎉 목표 개수 도달! 데이터 수집 완료.
--------------------------------
